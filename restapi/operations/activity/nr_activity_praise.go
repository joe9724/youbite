// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"youbite/models"
	"fmt"
	"youbite/var"
	_"strconv"
	"time"
)

// NrActivityPraiseHandlerFunc turns a function with the right signature into a activity praise handler
type NrActivityPraiseHandlerFunc func(NrActivityPraiseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrActivityPraiseHandlerFunc) Handle(params NrActivityPraiseParams) middleware.Responder {
	return fn(params)
}

// NrActivityPraiseHandler interface for that can handle valid activity praise params
type NrActivityPraiseHandler interface {
	Handle(NrActivityPraiseParams) middleware.Responder
}

// NewNrActivityPraise creates a new http.Handler for the activity praise operation
func NewNrActivityPraise(ctx *middleware.Context, handler NrActivityPraiseHandler) *NrActivityPraise {
	return &NrActivityPraise{Context: ctx, Handler: handler}
}

/*NrActivityPraise swagger:route GET /activity/praise Activity activityPraise

点赞活动

参加活动

*/
type NrActivityPraise struct {
	Context *middleware.Context
	Handler NrActivityPraiseHandler
}

func (o *NrActivityPraise) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrActivityPraiseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok ActivityPraiseOK
	var response models.InlineResponse2002
	//var activityList models.InlineResponse2004Orders
	//var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//先查询活动是否需要费用
	var activity models.Activity
	var msg string
	var code int64

	db.Raw("select * from activities where id=?",Params.ActivityID).First(&activity)
	if activity.ID!=0{
		db.Exec("insert into activity_praise(activityId,memberId,time) values(?,?,?)",Params.ActivityID,Params.MemberID,time.Now().UnixNano()/1000000)
		msg = "点赞成功"
		code = 200
	}else{
		msg = "活动不存在"
		code = 404
	}
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	//response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
