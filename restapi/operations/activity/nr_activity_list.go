// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"youbite/models"
	"fmt"
	"youbite/var"
	_"strconv"
)

// NrActivityListHandlerFunc turns a function with the right signature into a activity list handler
type NrActivityListHandlerFunc func(NrActivityListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrActivityListHandlerFunc) Handle(params NrActivityListParams) middleware.Responder {
	return fn(params)
}

// NrActivityListHandler interface for that can handle valid activity list params
type NrActivityListHandler interface {
	Handle(NrActivityListParams) middleware.Responder
}

// NewNrActivityList creates a new http.Handler for the activity list operation
func NewNrActivityList(ctx *middleware.Context, handler NrActivityListHandler) *NrActivityList {
	return &NrActivityList{Context: ctx, Handler: handler}
}

/*NrActivityList swagger:route GET /activity/list Activity activityList

获取活动列表(含条件检索)

获取活动列表(含条件检索)

*/
type NrActivityList struct {
	Context *middleware.Context
	Handler NrActivityListHandler
}

func (o *NrActivityList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrActivityListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok ActivityListOK
	var response models.InlineResponse2004
	var activityList models.InlineResponse2004Orders
	//var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//query
	//db.Table("recharge").Where(map[string]interface{}{"status":0}).Find(&rechargeList).Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize)))
	db.Table("activities").Limit(*(Params.PageSize)).Offset(*(Params.PageIndex)*(*(Params.PageSize))).Find(&activityList)
	//db.Table("msgs").Where("status=?",0).Count(&count)
	//data
	response.Activities = activityList
	//fmt.Println("haspushed is",albumList[0].HasPushed)
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status
	//response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
