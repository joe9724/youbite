// Code generated by go-swagger; DO NOT EDIT.

package activity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"youbite/models"
	"fmt"
	"youbite/var"
	_"strconv"
	"time"
)

// NrActivityFavHandlerFunc turns a function with the right signature into a activity fav handler
type NrActivityFavHandlerFunc func(NrActivityFavParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrActivityFavHandlerFunc) Handle(params NrActivityFavParams) middleware.Responder {
	return fn(params)
}

// NrActivityFavHandler interface for that can handle valid activity fav params
type NrActivityFavHandler interface {
	Handle(NrActivityFavParams) middleware.Responder
}

// NewNrActivityFav creates a new http.Handler for the activity fav operation
func NewNrActivityFav(ctx *middleware.Context, handler NrActivityFavHandler) *NrActivityFav {
	return &NrActivityFav{Context: ctx, Handler: handler}
}

/*NrActivityFav swagger:route GET /activity/fav Activity activityFav

收藏活动

参加活动

*/
type NrActivityFav struct {
	Context *middleware.Context
	Handler NrActivityFavHandler
}

func (o *NrActivityFav) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrActivityFavParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok ActivityFavOK
	var response models.InlineResponse2002
	//var activityList models.InlineResponse2004Orders
	//var count int64

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	defer db.Close()
	//先查询活动是否需要费用
	var activity models.Activity
	var msg string
	var code int64

	db.Raw("select * from activities where id=?",Params.ActivityID).First(&activity)
	if activity.ID!=0{
		if (*(Params.Action) == "fav"){
			db.Exec("insert into activity_fav(activityId,memberId,time) values(?,?,?)",Params.ActivityID,Params.MemberID,time.Now().UnixNano()/1000000)
			msg = "收藏成功"
			code = 200
		}else if (*(Params.Action) == "unfav"){
			db.Exec("delete from activity_fav where memberId=? and activityId=?",Params.MemberID,Params.ActivityID)
			msg = "取消收藏成功"
			code = 200
		}
	}else{
		msg = "活动不存在"
		code = 404
	}
	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(code,msg)))
	response.Status = &status
	//response.Status.TotalCount = count

	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
