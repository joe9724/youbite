// Code generated by go-swagger; DO NOT EDIT.

package feedback

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FeedbackDetailHandlerFunc turns a function with the right signature into a feedback detail handler
type FeedbackDetailHandlerFunc func(FeedbackDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FeedbackDetailHandlerFunc) Handle(params FeedbackDetailParams) middleware.Responder {
	return fn(params)
}

// FeedbackDetailHandler interface for that can handle valid feedback detail params
type FeedbackDetailHandler interface {
	Handle(FeedbackDetailParams) middleware.Responder
}

// NewFeedbackDetail creates a new http.Handler for the feedback detail operation
func NewFeedbackDetail(ctx *middleware.Context, handler FeedbackDetailHandler) *FeedbackDetail {
	return &FeedbackDetail{Context: ctx, Handler: handler}
}

/*FeedbackDetail swagger:route GET /feedback/detail Feedback feedbackDetail

反馈详情

反馈详情

*/
type FeedbackDetail struct {
	Context *middleware.Context
	Handler FeedbackDetailHandler
}

func (o *FeedbackDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFeedbackDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
