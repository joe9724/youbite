// Code generated by go-swagger; DO NOT EDIT.

package msg

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MsgSendListHandlerFunc turns a function with the right signature into a msg send list handler
type MsgSendListHandlerFunc func(MsgSendListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MsgSendListHandlerFunc) Handle(params MsgSendListParams) middleware.Responder {
	return fn(params)
}

// MsgSendListHandler interface for that can handle valid msg send list params
type MsgSendListHandler interface {
	Handle(MsgSendListParams) middleware.Responder
}

// NewMsgSendList creates a new http.Handler for the msg send list operation
func NewMsgSendList(ctx *middleware.Context, handler MsgSendListHandler) *MsgSendList {
	return &MsgSendList{Context: ctx, Handler: handler}
}

/*MsgSendList swagger:route GET /msg/send/list Msg msgSendList

已发送消息列表

已发送消息列表

*/
type MsgSendList struct {
	Context *middleware.Context
	Handler MsgSendListHandler
}

func (o *MsgSendList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMsgSendListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
