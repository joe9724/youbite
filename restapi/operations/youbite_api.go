// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"youbite/restapi/operations/activity"
	"youbite/restapi/operations/banner"
	"youbite/restapi/operations/category"
	"youbite/restapi/operations/community"
	"youbite/restapi/operations/feedback"
	"youbite/restapi/operations/goods"
	"youbite/restapi/operations/member"
	"youbite/restapi/operations/msg"
	"youbite/restapi/operations/relation"
	"youbite/restapi/operations/report_err"
	"youbite/restapi/operations/shuoshuo"
	"youbite/restapi/operations/topic"
	"youbite/restapi/operations/upload"
)

// NewYoubiteAPI creates a new Youbite instance
func NewYoubiteAPI(spec *loads.Document) *YoubiteAPI {
	return &YoubiteAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		RelationNrCategorySubCategoryListRelationHandler: relation.NrCategorySubCategoryListRelationHandlerFunc(func(params relation.NrCategorySubCategoryListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrCategorySubCategoryListRelation has not yet been implemented")
		}),
		ActivityNrActivityDeleteHandler: activity.NrActivityDeleteHandlerFunc(func(params activity.NrActivityDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityDelete has not yet been implemented")
		}),
		ActivityNrActivityDetailHandler: activity.NrActivityDetailHandlerFunc(func(params activity.NrActivityDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityDetail has not yet been implemented")
		}),
		ActivityNrActivityFavHandler: activity.NrActivityFavHandlerFunc(func(params activity.NrActivityFavParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityFav has not yet been implemented")
		}),
		ActivityNrActivityJoinHandler: activity.NrActivityJoinHandlerFunc(func(params activity.NrActivityJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityJoin has not yet been implemented")
		}),
		ActivityNrActivityJoinedMemberListHandler: activity.NrActivityJoinedMemberListHandlerFunc(func(params activity.NrActivityJoinedMemberListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityJoinedMemberList has not yet been implemented")
		}),
		ActivityNrActivityListHandler: activity.NrActivityListHandlerFunc(func(params activity.NrActivityListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityList has not yet been implemented")
		}),
		ActivityNrActivityListFavHandler: activity.NrActivityListFavHandlerFunc(func(params activity.NrActivityListFavParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListFav has not yet been implemented")
		}),
		ActivityNrActivityListJoinedHandler: activity.NrActivityListJoinedHandlerFunc(func(params activity.NrActivityListJoinedParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListJoined has not yet been implemented")
		}),
		ActivityNrActivityListPraiseHandler: activity.NrActivityListPraiseHandlerFunc(func(params activity.NrActivityListPraiseParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListPraise has not yet been implemented")
		}),
		ActivityNrActivityListSuggestHandler: activity.NrActivityListSuggestHandlerFunc(func(params activity.NrActivityListSuggestParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListSuggest has not yet been implemented")
		}),
		ActivityNrActivityPraiseHandler: activity.NrActivityPraiseHandlerFunc(func(params activity.NrActivityPraiseParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityPraise has not yet been implemented")
		}),
		ActivityNrActivityTagDeleteHandler: activity.NrActivityTagDeleteHandlerFunc(func(params activity.NrActivityTagDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityTagDelete has not yet been implemented")
		}),
		ActivityNrActivityTagDetailHandler: activity.NrActivityTagDetailHandlerFunc(func(params activity.NrActivityTagDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityTagDetail has not yet been implemented")
		}),
		ActivityNrActivityTagListHandler: activity.NrActivityTagListHandlerFunc(func(params activity.NrActivityTagListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityTagList has not yet been implemented")
		}),
		CategoryNrCategoryListHandler: category.NrCategoryListHandlerFunc(func(params category.NrCategoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategoryList has not yet been implemented")
		}),
		CommunityNrCommunityDetailHandler: community.NrCommunityDetailHandlerFunc(func(params community.NrCommunityDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation CommunityNrCommunityDetail has not yet been implemented")
		}),
		GoodsNrGoodsSpecDetailHandler: goods.NrGoodsSpecDetailHandlerFunc(func(params goods.NrGoodsSpecDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation GoodsNrGoodsSpecDetail has not yet been implemented")
		}),
		GoodsNrGoodsSpecListHandler: goods.NrGoodsSpecListHandlerFunc(func(params goods.NrGoodsSpecListParams) middleware.Responder {
			return middleware.NotImplemented("operation GoodsNrGoodsSpecList has not yet been implemented")
		}),
		MemberNrMemberAttentionListHandler: member.NrMemberAttentionListHandlerFunc(func(params member.NrMemberAttentionListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberAttentionList has not yet been implemented")
		}),
		MemberNrMemberCheckRechargeHandler: member.NrMemberCheckRechargeHandlerFunc(func(params member.NrMemberCheckRechargeParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberCheckRecharge has not yet been implemented")
		}),
		MemberNrMemberDeleteHandler: member.NrMemberDeleteHandlerFunc(func(params member.NrMemberDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberDelete has not yet been implemented")
		}),
		MemberNrMemberEditHandler: member.NrMemberEditHandlerFunc(func(params member.NrMemberEditParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberEdit has not yet been implemented")
		}),
		MemberNrMemberFansListHandler: member.NrMemberFansListHandlerFunc(func(params member.NrMemberFansListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberFansList has not yet been implemented")
		}),
		MemberNrMemberLoginByThirdPartyHandler: member.NrMemberLoginByThirdPartyHandlerFunc(func(params member.NrMemberLoginByThirdPartyParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberLoginByThirdParty has not yet been implemented")
		}),
		MemberNrMemberRegisterHandler: member.NrMemberRegisterHandlerFunc(func(params member.NrMemberRegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberRegister has not yet been implemented")
		}),
		MemberNrMemberRegisterSendSmsHandler: member.NrMemberRegisterSendSmsHandlerFunc(func(params member.NrMemberRegisterSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberRegisterSendSms has not yet been implemented")
		}),
		MemberNrMemberReportErrHandler: member.NrMemberReportErrHandlerFunc(func(params member.NrMemberReportErrParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberReportErr has not yet been implemented")
		}),
		MemberNrMemberScanCodeHandler: member.NrMemberScanCodeHandlerFunc(func(params member.NrMemberScanCodeParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberScanCode has not yet been implemented")
		}),
		MemberNrOrderSerialNuberHandler: member.NrOrderSerialNuberHandlerFunc(func(params member.NrOrderSerialNuberParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrOrderSerialNuber has not yet been implemented")
		}),
		ShuoshuoNrShuoshuoCommentDetailHandler: shuoshuo.NrShuoshuoCommentDetailHandlerFunc(func(params shuoshuo.NrShuoshuoCommentDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ShuoshuoNrShuoshuoCommentDetail has not yet been implemented")
		}),
		ShuoshuoNrShuoshuoCommentListHandler: shuoshuo.NrShuoshuoCommentListHandlerFunc(func(params shuoshuo.NrShuoshuoCommentListParams) middleware.Responder {
			return middleware.NotImplemented("operation ShuoshuoNrShuoshuoCommentList has not yet been implemented")
		}),
		ShuoshuoNrShuoshuoDetailHandler: shuoshuo.NrShuoshuoDetailHandlerFunc(func(params shuoshuo.NrShuoshuoDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ShuoshuoNrShuoshuoDetail has not yet been implemented")
		}),
		MemberNrStartUpHandler: member.NrStartUpHandlerFunc(func(params member.NrStartUpParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrStartUp has not yet been implemented")
		}),
		RelationNrSubCategoryGoodsListRelationHandler: relation.NrSubCategoryGoodsListRelationHandlerFunc(func(params relation.NrSubCategoryGoodsListRelationParams) middleware.Responder {
			return middleware.NotImplemented("operation RelationNrSubCategoryGoodsListRelation has not yet been implemented")
		}),
		TopicNrTopicDetailHandler: topic.NrTopicDetailHandlerFunc(func(params topic.NrTopicDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicNrTopicDetail has not yet been implemented")
		}),
		ActivityActivityEditHandler: activity.ActivityEditHandlerFunc(func(params activity.ActivityEditParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityActivityEdit has not yet been implemented")
		}),
		ActivityActivityTagEditHandler: activity.ActivityTagEditHandlerFunc(func(params activity.ActivityTagEditParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityActivityTagEdit has not yet been implemented")
		}),
		ActivityActivityTagUploadHandler: activity.ActivityTagUploadHandlerFunc(func(params activity.ActivityTagUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityActivityTagUpload has not yet been implemented")
		}),
		ActivityActivityUploadHandler: activity.ActivityUploadHandlerFunc(func(params activity.ActivityUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityActivityUpload has not yet been implemented")
		}),
		BannerBannerDetailHandler: banner.BannerDetailHandlerFunc(func(params banner.BannerDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerBannerDetail has not yet been implemented")
		}),
		BannerBannerListHandler: banner.BannerListHandlerFunc(func(params banner.BannerListParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerBannerList has not yet been implemented")
		}),
		CategoryCategoryDetailHandler: category.CategoryDetailHandlerFunc(func(params category.CategoryDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryCategoryDetail has not yet been implemented")
		}),
		CommunityCommunityListHandler: community.CommunityListHandlerFunc(func(params community.CommunityListParams) middleware.Responder {
			return middleware.NotImplemented("operation CommunityCommunityList has not yet been implemented")
		}),
		MemberFeedbackHandler: member.FeedbackHandlerFunc(func(params member.FeedbackParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFeedback has not yet been implemented")
		}),
		FeedbackFeedbackDetailHandler: feedback.FeedbackDetailHandlerFunc(func(params feedback.FeedbackDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation FeedbackFeedbackDetail has not yet been implemented")
		}),
		FeedbackFeedbackListHandler: feedback.FeedbackListHandlerFunc(func(params feedback.FeedbackListParams) middleware.Responder {
			return middleware.NotImplemented("operation FeedbackFeedbackList has not yet been implemented")
		}),
		UploadFileUploadHandler: upload.FileUploadHandlerFunc(func(params upload.FileUploadParams) middleware.Responder {
			return middleware.NotImplemented("operation UploadFileUpload has not yet been implemented")
		}),
		MemberFindPassEditPassHandler: member.FindPassEditPassHandlerFunc(func(params member.FindPassEditPassParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassEditPass has not yet been implemented")
		}),
		MemberFindPassSendSmsHandler: member.FindPassSendSmsHandlerFunc(func(params member.FindPassSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassSendSms has not yet been implemented")
		}),
		GoodsGoodsDeleteHandler: goods.GoodsDeleteHandlerFunc(func(params goods.GoodsDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation GoodsGoodsDelete has not yet been implemented")
		}),
		GoodsGoodsDetailHandler: goods.GoodsDetailHandlerFunc(func(params goods.GoodsDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation GoodsGoodsDetail has not yet been implemented")
		}),
		GoodsGoodsListHandler: goods.GoodsListHandlerFunc(func(params goods.GoodsListParams) middleware.Responder {
			return middleware.NotImplemented("operation GoodsGoodsList has not yet been implemented")
		}),
		MemberLoginHandler: member.LoginHandlerFunc(func(params member.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberLogin has not yet been implemented")
		}),
		MemberMemberDetailHandler: member.MemberDetailHandlerFunc(func(params member.MemberDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberDetail has not yet been implemented")
		}),
		MemberMemberListHandler: member.MemberListHandlerFunc(func(params member.MemberListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberList has not yet been implemented")
		}),
		MemberMemberOrderDetailHandler: member.MemberOrderDetailHandlerFunc(func(params member.MemberOrderDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberOrderDetail has not yet been implemented")
		}),
		MemberMemberOrderListHandler: member.MemberOrderListHandlerFunc(func(params member.MemberOrderListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberOrderList has not yet been implemented")
		}),
		MemberMemberRechargeListHandler: member.MemberRechargeListHandlerFunc(func(params member.MemberRechargeListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberMemberRechargeList has not yet been implemented")
		}),
		MsgMsgDetailHandler: msg.MsgDetailHandlerFunc(func(params msg.MsgDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgDetail has not yet been implemented")
		}),
		MsgMsgSendListHandler: msg.MsgSendListHandlerFunc(func(params msg.MsgSendListParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgSendList has not yet been implemented")
		}),
		MsgMsgUnsendListHandler: msg.MsgUnsendListHandlerFunc(func(params msg.MsgUnsendListParams) middleware.Responder {
			return middleware.NotImplemented("operation MsgMsgUnsendList has not yet been implemented")
		}),
		ReportErrReportErrDetailHandler: report_err.ReportErrDetailHandlerFunc(func(params report_err.ReportErrDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportErrReportErrDetail has not yet been implemented")
		}),
		ReportErrReportErrListHandler: report_err.ReportErrListHandlerFunc(func(params report_err.ReportErrListParams) middleware.Responder {
			return middleware.NotImplemented("operation ReportErrReportErrList has not yet been implemented")
		}),
		ShuoshuoShuoshuoListHandler: shuoshuo.ShuoshuoListHandlerFunc(func(params shuoshuo.ShuoshuoListParams) middleware.Responder {
			return middleware.NotImplemented("operation ShuoshuoShuoshuoList has not yet been implemented")
		}),
		TopicTopicListHandler: topic.TopicListHandlerFunc(func(params topic.TopicListParams) middleware.Responder {
			return middleware.NotImplemented("operation TopicTopicList has not yet been implemented")
		}),
	}
}

/*YoubiteAPI Youbite(Api) */
type YoubiteAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// RelationNrCategorySubCategoryListRelationHandler sets the operation handler for the category sub category list relation operation
	RelationNrCategorySubCategoryListRelationHandler relation.NrCategorySubCategoryListRelationHandler
	// ActivityNrActivityDeleteHandler sets the operation handler for the activity delete operation
	ActivityNrActivityDeleteHandler activity.NrActivityDeleteHandler
	// ActivityNrActivityDetailHandler sets the operation handler for the activity detail operation
	ActivityNrActivityDetailHandler activity.NrActivityDetailHandler
	// ActivityNrActivityFavHandler sets the operation handler for the activity fav operation
	ActivityNrActivityFavHandler activity.NrActivityFavHandler
	// ActivityNrActivityJoinHandler sets the operation handler for the activity join operation
	ActivityNrActivityJoinHandler activity.NrActivityJoinHandler
	// ActivityNrActivityJoinedMemberListHandler sets the operation handler for the activity joined member list operation
	ActivityNrActivityJoinedMemberListHandler activity.NrActivityJoinedMemberListHandler
	// ActivityNrActivityListHandler sets the operation handler for the activity list operation
	ActivityNrActivityListHandler activity.NrActivityListHandler
	// ActivityNrActivityListFavHandler sets the operation handler for the activity list fav operation
	ActivityNrActivityListFavHandler activity.NrActivityListFavHandler
	// ActivityNrActivityListJoinedHandler sets the operation handler for the activity list joined operation
	ActivityNrActivityListJoinedHandler activity.NrActivityListJoinedHandler
	// ActivityNrActivityListPraiseHandler sets the operation handler for the activity list praise operation
	ActivityNrActivityListPraiseHandler activity.NrActivityListPraiseHandler
	// ActivityNrActivityListSuggestHandler sets the operation handler for the activity list suggest operation
	ActivityNrActivityListSuggestHandler activity.NrActivityListSuggestHandler
	// ActivityNrActivityPraiseHandler sets the operation handler for the activity praise operation
	ActivityNrActivityPraiseHandler activity.NrActivityPraiseHandler
	// ActivityNrActivityTagDeleteHandler sets the operation handler for the activity tag delete operation
	ActivityNrActivityTagDeleteHandler activity.NrActivityTagDeleteHandler
	// ActivityNrActivityTagDetailHandler sets the operation handler for the activity tag detail operation
	ActivityNrActivityTagDetailHandler activity.NrActivityTagDetailHandler
	// ActivityNrActivityTagListHandler sets the operation handler for the activity tag list operation
	ActivityNrActivityTagListHandler activity.NrActivityTagListHandler
	// CategoryNrCategoryListHandler sets the operation handler for the category list operation
	CategoryNrCategoryListHandler category.NrCategoryListHandler
	// CommunityNrCommunityDetailHandler sets the operation handler for the community detail operation
	CommunityNrCommunityDetailHandler community.NrCommunityDetailHandler
	// GoodsNrGoodsSpecDetailHandler sets the operation handler for the goods spec detail operation
	GoodsNrGoodsSpecDetailHandler goods.NrGoodsSpecDetailHandler
	// GoodsNrGoodsSpecListHandler sets the operation handler for the goods spec list operation
	GoodsNrGoodsSpecListHandler goods.NrGoodsSpecListHandler
	// MemberNrMemberAttentionListHandler sets the operation handler for the member attention list operation
	MemberNrMemberAttentionListHandler member.NrMemberAttentionListHandler
	// MemberNrMemberCheckRechargeHandler sets the operation handler for the member check recharge operation
	MemberNrMemberCheckRechargeHandler member.NrMemberCheckRechargeHandler
	// MemberNrMemberDeleteHandler sets the operation handler for the member delete operation
	MemberNrMemberDeleteHandler member.NrMemberDeleteHandler
	// MemberNrMemberEditHandler sets the operation handler for the member edit operation
	MemberNrMemberEditHandler member.NrMemberEditHandler
	// MemberNrMemberFansListHandler sets the operation handler for the member fans list operation
	MemberNrMemberFansListHandler member.NrMemberFansListHandler
	// MemberNrMemberLoginByThirdPartyHandler sets the operation handler for the member login by third party operation
	MemberNrMemberLoginByThirdPartyHandler member.NrMemberLoginByThirdPartyHandler
	// MemberNrMemberRegisterHandler sets the operation handler for the member register operation
	MemberNrMemberRegisterHandler member.NrMemberRegisterHandler
	// MemberNrMemberRegisterSendSmsHandler sets the operation handler for the member register send sms operation
	MemberNrMemberRegisterSendSmsHandler member.NrMemberRegisterSendSmsHandler
	// MemberNrMemberReportErrHandler sets the operation handler for the member report err operation
	MemberNrMemberReportErrHandler member.NrMemberReportErrHandler
	// MemberNrMemberScanCodeHandler sets the operation handler for the member scan code operation
	MemberNrMemberScanCodeHandler member.NrMemberScanCodeHandler
	// MemberNrOrderSerialNuberHandler sets the operation handler for the order serial nuber operation
	MemberNrOrderSerialNuberHandler member.NrOrderSerialNuberHandler
	// ShuoshuoNrShuoshuoCommentDetailHandler sets the operation handler for the shuoshuo comment detail operation
	ShuoshuoNrShuoshuoCommentDetailHandler shuoshuo.NrShuoshuoCommentDetailHandler
	// ShuoshuoNrShuoshuoCommentListHandler sets the operation handler for the shuoshuo comment list operation
	ShuoshuoNrShuoshuoCommentListHandler shuoshuo.NrShuoshuoCommentListHandler
	// ShuoshuoNrShuoshuoDetailHandler sets the operation handler for the shuoshuo detail operation
	ShuoshuoNrShuoshuoDetailHandler shuoshuo.NrShuoshuoDetailHandler
	// MemberNrStartUpHandler sets the operation handler for the start up operation
	MemberNrStartUpHandler member.NrStartUpHandler
	// RelationNrSubCategoryGoodsListRelationHandler sets the operation handler for the sub category goods list relation operation
	RelationNrSubCategoryGoodsListRelationHandler relation.NrSubCategoryGoodsListRelationHandler
	// TopicNrTopicDetailHandler sets the operation handler for the topic detail operation
	TopicNrTopicDetailHandler topic.NrTopicDetailHandler
	// ActivityActivityEditHandler sets the operation handler for the activity edit operation
	ActivityActivityEditHandler activity.ActivityEditHandler
	// ActivityActivityTagEditHandler sets the operation handler for the activity tag edit operation
	ActivityActivityTagEditHandler activity.ActivityTagEditHandler
	// ActivityActivityTagUploadHandler sets the operation handler for the activity tag upload operation
	ActivityActivityTagUploadHandler activity.ActivityTagUploadHandler
	// ActivityActivityUploadHandler sets the operation handler for the activity upload operation
	ActivityActivityUploadHandler activity.ActivityUploadHandler
	// BannerBannerDetailHandler sets the operation handler for the banner detail operation
	BannerBannerDetailHandler banner.BannerDetailHandler
	// BannerBannerListHandler sets the operation handler for the banner list operation
	BannerBannerListHandler banner.BannerListHandler
	// CategoryCategoryDetailHandler sets the operation handler for the category detail operation
	CategoryCategoryDetailHandler category.CategoryDetailHandler
	// CommunityCommunityListHandler sets the operation handler for the community list operation
	CommunityCommunityListHandler community.CommunityListHandler
	// MemberFeedbackHandler sets the operation handler for the feedback operation
	MemberFeedbackHandler member.FeedbackHandler
	// FeedbackFeedbackDetailHandler sets the operation handler for the feedback detail operation
	FeedbackFeedbackDetailHandler feedback.FeedbackDetailHandler
	// FeedbackFeedbackListHandler sets the operation handler for the feedback list operation
	FeedbackFeedbackListHandler feedback.FeedbackListHandler
	// UploadFileUploadHandler sets the operation handler for the file upload operation
	UploadFileUploadHandler upload.FileUploadHandler
	// MemberFindPassEditPassHandler sets the operation handler for the find pass edit pass operation
	MemberFindPassEditPassHandler member.FindPassEditPassHandler
	// MemberFindPassSendSmsHandler sets the operation handler for the find pass send sms operation
	MemberFindPassSendSmsHandler member.FindPassSendSmsHandler
	// GoodsGoodsDeleteHandler sets the operation handler for the goods delete operation
	GoodsGoodsDeleteHandler goods.GoodsDeleteHandler
	// GoodsGoodsDetailHandler sets the operation handler for the goods detail operation
	GoodsGoodsDetailHandler goods.GoodsDetailHandler
	// GoodsGoodsListHandler sets the operation handler for the goods list operation
	GoodsGoodsListHandler goods.GoodsListHandler
	// MemberLoginHandler sets the operation handler for the login operation
	MemberLoginHandler member.LoginHandler
	// MemberMemberDetailHandler sets the operation handler for the member detail operation
	MemberMemberDetailHandler member.MemberDetailHandler
	// MemberMemberListHandler sets the operation handler for the member list operation
	MemberMemberListHandler member.MemberListHandler
	// MemberMemberOrderDetailHandler sets the operation handler for the member order detail operation
	MemberMemberOrderDetailHandler member.MemberOrderDetailHandler
	// MemberMemberOrderListHandler sets the operation handler for the member order list operation
	MemberMemberOrderListHandler member.MemberOrderListHandler
	// MemberMemberRechargeListHandler sets the operation handler for the member recharge list operation
	MemberMemberRechargeListHandler member.MemberRechargeListHandler
	// MsgMsgDetailHandler sets the operation handler for the msg detail operation
	MsgMsgDetailHandler msg.MsgDetailHandler
	// MsgMsgSendListHandler sets the operation handler for the msg send list operation
	MsgMsgSendListHandler msg.MsgSendListHandler
	// MsgMsgUnsendListHandler sets the operation handler for the msg unsend list operation
	MsgMsgUnsendListHandler msg.MsgUnsendListHandler
	// ReportErrReportErrDetailHandler sets the operation handler for the report err detail operation
	ReportErrReportErrDetailHandler report_err.ReportErrDetailHandler
	// ReportErrReportErrListHandler sets the operation handler for the report err list operation
	ReportErrReportErrListHandler report_err.ReportErrListHandler
	// ShuoshuoShuoshuoListHandler sets the operation handler for the shuoshuo list operation
	ShuoshuoShuoshuoListHandler shuoshuo.ShuoshuoListHandler
	// TopicTopicListHandler sets the operation handler for the topic list operation
	TopicTopicListHandler topic.TopicListHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *YoubiteAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *YoubiteAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *YoubiteAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *YoubiteAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *YoubiteAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *YoubiteAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *YoubiteAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the YoubiteAPI
func (o *YoubiteAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.RelationNrCategorySubCategoryListRelationHandler == nil {
		unregistered = append(unregistered, "relation.NrCategorySubCategoryListRelationHandler")
	}

	if o.ActivityNrActivityDeleteHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityDeleteHandler")
	}

	if o.ActivityNrActivityDetailHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityDetailHandler")
	}

	if o.ActivityNrActivityFavHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityFavHandler")
	}

	if o.ActivityNrActivityJoinHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityJoinHandler")
	}

	if o.ActivityNrActivityJoinedMemberListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityJoinedMemberListHandler")
	}

	if o.ActivityNrActivityListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListHandler")
	}

	if o.ActivityNrActivityListFavHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListFavHandler")
	}

	if o.ActivityNrActivityListJoinedHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListJoinedHandler")
	}

	if o.ActivityNrActivityListPraiseHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListPraiseHandler")
	}

	if o.ActivityNrActivityListSuggestHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListSuggestHandler")
	}

	if o.ActivityNrActivityPraiseHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityPraiseHandler")
	}

	if o.ActivityNrActivityTagDeleteHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityTagDeleteHandler")
	}

	if o.ActivityNrActivityTagDetailHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityTagDetailHandler")
	}

	if o.ActivityNrActivityTagListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityTagListHandler")
	}

	if o.CategoryNrCategoryListHandler == nil {
		unregistered = append(unregistered, "category.NrCategoryListHandler")
	}

	if o.CommunityNrCommunityDetailHandler == nil {
		unregistered = append(unregistered, "community.NrCommunityDetailHandler")
	}

	if o.GoodsNrGoodsSpecDetailHandler == nil {
		unregistered = append(unregistered, "goods.NrGoodsSpecDetailHandler")
	}

	if o.GoodsNrGoodsSpecListHandler == nil {
		unregistered = append(unregistered, "goods.NrGoodsSpecListHandler")
	}

	if o.MemberNrMemberAttentionListHandler == nil {
		unregistered = append(unregistered, "member.NrMemberAttentionListHandler")
	}

	if o.MemberNrMemberCheckRechargeHandler == nil {
		unregistered = append(unregistered, "member.NrMemberCheckRechargeHandler")
	}

	if o.MemberNrMemberDeleteHandler == nil {
		unregistered = append(unregistered, "member.NrMemberDeleteHandler")
	}

	if o.MemberNrMemberEditHandler == nil {
		unregistered = append(unregistered, "member.NrMemberEditHandler")
	}

	if o.MemberNrMemberFansListHandler == nil {
		unregistered = append(unregistered, "member.NrMemberFansListHandler")
	}

	if o.MemberNrMemberLoginByThirdPartyHandler == nil {
		unregistered = append(unregistered, "member.NrMemberLoginByThirdPartyHandler")
	}

	if o.MemberNrMemberRegisterHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRegisterHandler")
	}

	if o.MemberNrMemberRegisterSendSmsHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRegisterSendSmsHandler")
	}

	if o.MemberNrMemberReportErrHandler == nil {
		unregistered = append(unregistered, "member.NrMemberReportErrHandler")
	}

	if o.MemberNrMemberScanCodeHandler == nil {
		unregistered = append(unregistered, "member.NrMemberScanCodeHandler")
	}

	if o.MemberNrOrderSerialNuberHandler == nil {
		unregistered = append(unregistered, "member.NrOrderSerialNuberHandler")
	}

	if o.ShuoshuoNrShuoshuoCommentDetailHandler == nil {
		unregistered = append(unregistered, "shuoshuo.NrShuoshuoCommentDetailHandler")
	}

	if o.ShuoshuoNrShuoshuoCommentListHandler == nil {
		unregistered = append(unregistered, "shuoshuo.NrShuoshuoCommentListHandler")
	}

	if o.ShuoshuoNrShuoshuoDetailHandler == nil {
		unregistered = append(unregistered, "shuoshuo.NrShuoshuoDetailHandler")
	}

	if o.MemberNrStartUpHandler == nil {
		unregistered = append(unregistered, "member.NrStartUpHandler")
	}

	if o.RelationNrSubCategoryGoodsListRelationHandler == nil {
		unregistered = append(unregistered, "relation.NrSubCategoryGoodsListRelationHandler")
	}

	if o.TopicNrTopicDetailHandler == nil {
		unregistered = append(unregistered, "topic.NrTopicDetailHandler")
	}

	if o.ActivityActivityEditHandler == nil {
		unregistered = append(unregistered, "activity.ActivityEditHandler")
	}

	if o.ActivityActivityTagEditHandler == nil {
		unregistered = append(unregistered, "activity.ActivityTagEditHandler")
	}

	if o.ActivityActivityTagUploadHandler == nil {
		unregistered = append(unregistered, "activity.ActivityTagUploadHandler")
	}

	if o.ActivityActivityUploadHandler == nil {
		unregistered = append(unregistered, "activity.ActivityUploadHandler")
	}

	if o.BannerBannerDetailHandler == nil {
		unregistered = append(unregistered, "banner.BannerDetailHandler")
	}

	if o.BannerBannerListHandler == nil {
		unregistered = append(unregistered, "banner.BannerListHandler")
	}

	if o.CategoryCategoryDetailHandler == nil {
		unregistered = append(unregistered, "category.CategoryDetailHandler")
	}

	if o.CommunityCommunityListHandler == nil {
		unregistered = append(unregistered, "community.CommunityListHandler")
	}

	if o.MemberFeedbackHandler == nil {
		unregistered = append(unregistered, "member.FeedbackHandler")
	}

	if o.FeedbackFeedbackDetailHandler == nil {
		unregistered = append(unregistered, "feedback.FeedbackDetailHandler")
	}

	if o.FeedbackFeedbackListHandler == nil {
		unregistered = append(unregistered, "feedback.FeedbackListHandler")
	}

	if o.UploadFileUploadHandler == nil {
		unregistered = append(unregistered, "upload.FileUploadHandler")
	}

	if o.MemberFindPassEditPassHandler == nil {
		unregistered = append(unregistered, "member.FindPassEditPassHandler")
	}

	if o.MemberFindPassSendSmsHandler == nil {
		unregistered = append(unregistered, "member.FindPassSendSmsHandler")
	}

	if o.GoodsGoodsDeleteHandler == nil {
		unregistered = append(unregistered, "goods.GoodsDeleteHandler")
	}

	if o.GoodsGoodsDetailHandler == nil {
		unregistered = append(unregistered, "goods.GoodsDetailHandler")
	}

	if o.GoodsGoodsListHandler == nil {
		unregistered = append(unregistered, "goods.GoodsListHandler")
	}

	if o.MemberLoginHandler == nil {
		unregistered = append(unregistered, "member.LoginHandler")
	}

	if o.MemberMemberDetailHandler == nil {
		unregistered = append(unregistered, "member.MemberDetailHandler")
	}

	if o.MemberMemberListHandler == nil {
		unregistered = append(unregistered, "member.MemberListHandler")
	}

	if o.MemberMemberOrderDetailHandler == nil {
		unregistered = append(unregistered, "member.MemberOrderDetailHandler")
	}

	if o.MemberMemberOrderListHandler == nil {
		unregistered = append(unregistered, "member.MemberOrderListHandler")
	}

	if o.MemberMemberRechargeListHandler == nil {
		unregistered = append(unregistered, "member.MemberRechargeListHandler")
	}

	if o.MsgMsgDetailHandler == nil {
		unregistered = append(unregistered, "msg.MsgDetailHandler")
	}

	if o.MsgMsgSendListHandler == nil {
		unregistered = append(unregistered, "msg.MsgSendListHandler")
	}

	if o.MsgMsgUnsendListHandler == nil {
		unregistered = append(unregistered, "msg.MsgUnsendListHandler")
	}

	if o.ReportErrReportErrDetailHandler == nil {
		unregistered = append(unregistered, "report_err.ReportErrDetailHandler")
	}

	if o.ReportErrReportErrListHandler == nil {
		unregistered = append(unregistered, "report_err.ReportErrListHandler")
	}

	if o.ShuoshuoShuoshuoListHandler == nil {
		unregistered = append(unregistered, "shuoshuo.ShuoshuoListHandler")
	}

	if o.TopicTopicListHandler == nil {
		unregistered = append(unregistered, "topic.TopicListHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *YoubiteAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *YoubiteAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *YoubiteAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *YoubiteAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *YoubiteAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *YoubiteAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the youbite API
func (o *YoubiteAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *YoubiteAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/Category/subCategoryList"] = relation.NewNrCategorySubCategoryListRelation(o.context, o.RelationNrCategorySubCategoryListRelationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/delete"] = activity.NewNrActivityDelete(o.context, o.ActivityNrActivityDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/detail"] = activity.NewNrActivityDetail(o.context, o.ActivityNrActivityDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/fav"] = activity.NewNrActivityFav(o.context, o.ActivityNrActivityFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/join"] = activity.NewNrActivityJoin(o.context, o.ActivityNrActivityJoinHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/joined/memberList"] = activity.NewNrActivityJoinedMemberList(o.context, o.ActivityNrActivityJoinedMemberListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list"] = activity.NewNrActivityList(o.context, o.ActivityNrActivityListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/fav"] = activity.NewNrActivityListFav(o.context, o.ActivityNrActivityListFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/joined"] = activity.NewNrActivityListJoined(o.context, o.ActivityNrActivityListJoinedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/praise"] = activity.NewNrActivityListPraise(o.context, o.ActivityNrActivityListPraiseHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/suggest"] = activity.NewNrActivityListSuggest(o.context, o.ActivityNrActivityListSuggestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/praise"] = activity.NewNrActivityPraise(o.context, o.ActivityNrActivityPraiseHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/tag/delete"] = activity.NewNrActivityTagDelete(o.context, o.ActivityNrActivityTagDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/tag/detail"] = activity.NewNrActivityTagDetail(o.context, o.ActivityNrActivityTagDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/tag/list"] = activity.NewNrActivityTagList(o.context, o.ActivityNrActivityTagListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/list"] = category.NewNrCategoryList(o.context, o.CategoryNrCategoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/community/detail"] = community.NewNrCommunityDetail(o.context, o.CommunityNrCommunityDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/goods/spec/detail"] = goods.NewNrGoodsSpecDetail(o.context, o.GoodsNrGoodsSpecDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/goods/spec/list"] = goods.NewNrGoodsSpecList(o.context, o.GoodsNrGoodsSpecListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/attention/list"] = member.NewNrMemberAttentionList(o.context, o.MemberNrMemberAttentionListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/checkRecharge"] = member.NewNrMemberCheckRecharge(o.context, o.MemberNrMemberCheckRechargeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/delete"] = member.NewNrMemberDelete(o.context, o.MemberNrMemberDeleteHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/edit"] = member.NewNrMemberEdit(o.context, o.MemberNrMemberEditHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/fans/list"] = member.NewNrMemberFansList(o.context, o.MemberNrMemberFansListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/loginByThirdParty"] = member.NewNrMemberLoginByThirdParty(o.context, o.MemberNrMemberLoginByThirdPartyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/register"] = member.NewNrMemberRegister(o.context, o.MemberNrMemberRegisterHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/register/sendSms"] = member.NewNrMemberRegisterSendSms(o.context, o.MemberNrMemberRegisterSendSmsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/reportErr"] = member.NewNrMemberReportErr(o.context, o.MemberNrMemberReportErrHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/scanCode"] = member.NewNrMemberScanCode(o.context, o.MemberNrMemberScanCodeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/order/serialNuber"] = member.NewNrOrderSerialNuber(o.context, o.MemberNrOrderSerialNuberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shuoshuo/comment/detail"] = shuoshuo.NewNrShuoshuoCommentDetail(o.context, o.ShuoshuoNrShuoshuoCommentDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shuoshuo/comment/list"] = shuoshuo.NewNrShuoshuoCommentList(o.context, o.ShuoshuoNrShuoshuoCommentListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shuoshuo/detail"] = shuoshuo.NewNrShuoshuoDetail(o.context, o.ShuoshuoNrShuoshuoDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/startUp"] = member.NewNrStartUp(o.context, o.MemberNrStartUpHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/relation/subCategory/goodsList"] = relation.NewNrSubCategoryGoodsListRelation(o.context, o.RelationNrSubCategoryGoodsListRelationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/detail"] = topic.NewNrTopicDetail(o.context, o.TopicNrTopicDetailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/activity/edit"] = activity.NewActivityEdit(o.context, o.ActivityActivityEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/activity/tag/edit"] = activity.NewActivityTagEdit(o.context, o.ActivityActivityTagEditHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/activity/tag/upload"] = activity.NewActivityTagUpload(o.context, o.ActivityActivityTagUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/activity/upload"] = activity.NewActivityUpload(o.context, o.ActivityActivityUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/detail"] = banner.NewBannerDetail(o.context, o.BannerBannerDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/list"] = banner.NewBannerList(o.context, o.BannerBannerListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/detail"] = category.NewCategoryDetail(o.context, o.CategoryCategoryDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/community/list"] = community.NewCommunityList(o.context, o.CommunityCommunityListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/feedback"] = member.NewFeedback(o.context, o.MemberFeedbackHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/feedback/detail"] = feedback.NewFeedbackDetail(o.context, o.FeedbackFeedbackDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/feedback/list"] = feedback.NewFeedbackList(o.context, o.FeedbackFeedbackListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/file/upload"] = upload.NewFileUpload(o.context, o.UploadFileUploadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/editPass"] = member.NewFindPassEditPass(o.context, o.MemberFindPassEditPassHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/sendSms"] = member.NewFindPassSendSms(o.context, o.MemberFindPassSendSmsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/goods/delete"] = goods.NewGoodsDelete(o.context, o.GoodsGoodsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/goods/detail"] = goods.NewGoodsDetail(o.context, o.GoodsGoodsDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/goods/list"] = goods.NewGoodsList(o.context, o.GoodsGoodsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/login"] = member.NewLogin(o.context, o.MemberLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/detail"] = member.NewMemberDetail(o.context, o.MemberMemberDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/list"] = member.NewMemberList(o.context, o.MemberMemberListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/order/detail"] = member.NewMemberOrderDetail(o.context, o.MemberMemberOrderDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/order/list"] = member.NewMemberOrderList(o.context, o.MemberMemberOrderListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/recharge/list"] = member.NewMemberRechargeList(o.context, o.MemberMemberRechargeListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/detail"] = msg.NewMsgDetail(o.context, o.MsgMsgDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/send/list"] = msg.NewMsgSendList(o.context, o.MsgMsgSendListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/msg/unsend/list"] = msg.NewMsgUnsendList(o.context, o.MsgMsgUnsendListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reportErr/detail"] = report_err.NewReportErrDetail(o.context, o.ReportErrReportErrDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/reportErr/list"] = report_err.NewReportErrList(o.context, o.ReportErrReportErrListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/shuoshuo/list"] = shuoshuo.NewShuoshuoList(o.context, o.ShuoshuoShuoshuoListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/topic/list"] = topic.NewTopicList(o.context, o.TopicTopicListHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *YoubiteAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *YoubiteAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
