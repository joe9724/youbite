// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "youbite/models"
)

// FeedbackOKCode is the HTTP code returned for type FeedbackOK
const FeedbackOKCode int = 200

/*FeedbackOK 上报错误返回

swagger:response feedbackOK
*/
type FeedbackOK struct {

	/*
	  In: Body
	*/
	Payload *models.InlineResponse2003 `json:"body,omitempty"`
}

// NewFeedbackOK creates FeedbackOK with default headers values
func NewFeedbackOK() *FeedbackOK {
	return &FeedbackOK{}
}

// WithPayload adds the payload to the feedback o k response
func (o *FeedbackOK) WithPayload(payload *models.InlineResponse2003) *FeedbackOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feedback o k response
func (o *FeedbackOK) SetPayload(payload *models.InlineResponse2003) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeedbackOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*FeedbackDefault error

swagger:response feedbackDefault
*/
type FeedbackDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFeedbackDefault creates FeedbackDefault with default headers values
func NewFeedbackDefault(code int) *FeedbackDefault {
	if code <= 0 {
		code = 500
	}

	return &FeedbackDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the feedback default response
func (o *FeedbackDefault) WithStatusCode(code int) *FeedbackDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the feedback default response
func (o *FeedbackDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the feedback default response
func (o *FeedbackDefault) WithPayload(payload *models.Error) *FeedbackDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the feedback default response
func (o *FeedbackDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FeedbackDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
