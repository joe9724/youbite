// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FindPassSendSmsHandlerFunc turns a function with the right signature into a find pass send sms handler
type FindPassSendSmsHandlerFunc func(FindPassSendSmsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FindPassSendSmsHandlerFunc) Handle(params FindPassSendSmsParams) middleware.Responder {
	return fn(params)
}

// FindPassSendSmsHandler interface for that can handle valid find pass send sms params
type FindPassSendSmsHandler interface {
	Handle(FindPassSendSmsParams) middleware.Responder
}

// NewFindPassSendSms creates a new http.Handler for the find pass send sms operation
func NewFindPassSendSms(ctx *middleware.Context, handler FindPassSendSmsHandler) *FindPassSendSms {
	return &FindPassSendSms{Context: ctx, Handler: handler}
}

/*FindPassSendSms swagger:route GET /member/findPass/sendSms Member findPassSendSms

下发找回密码时的验证码

下发找回密码时的验证码

*/
type FindPassSendSms struct {
	Context *middleware.Context
	Handler FindPassSendSmsHandler
}

func (o *FindPassSendSms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFindPassSendSmsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
