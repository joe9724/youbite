// Code generated by go-swagger; DO NOT EDIT.

package goods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GoodsDeleteHandlerFunc turns a function with the right signature into a goods delete handler
type GoodsDeleteHandlerFunc func(GoodsDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GoodsDeleteHandlerFunc) Handle(params GoodsDeleteParams) middleware.Responder {
	return fn(params)
}

// GoodsDeleteHandler interface for that can handle valid goods delete params
type GoodsDeleteHandler interface {
	Handle(GoodsDeleteParams) middleware.Responder
}

// NewGoodsDelete creates a new http.Handler for the goods delete operation
func NewGoodsDelete(ctx *middleware.Context, handler GoodsDeleteHandler) *GoodsDelete {
	return &GoodsDelete{Context: ctx, Handler: handler}
}

/*GoodsDelete swagger:route GET /goods/delete Goods goodsDelete

删除商品

删除商品

*/
type GoodsDelete struct {
	Context *middleware.Context
	Handler GoodsDeleteHandler
}

func (o *GoodsDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGoodsDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
