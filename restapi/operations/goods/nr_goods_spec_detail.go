// Code generated by go-swagger; DO NOT EDIT.

package goods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NrGoodsSpecDetailHandlerFunc turns a function with the right signature into a goods spec detail handler
type NrGoodsSpecDetailHandlerFunc func(NrGoodsSpecDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrGoodsSpecDetailHandlerFunc) Handle(params NrGoodsSpecDetailParams) middleware.Responder {
	return fn(params)
}

// NrGoodsSpecDetailHandler interface for that can handle valid goods spec detail params
type NrGoodsSpecDetailHandler interface {
	Handle(NrGoodsSpecDetailParams) middleware.Responder
}

// NewNrGoodsSpecDetail creates a new http.Handler for the goods spec detail operation
func NewNrGoodsSpecDetail(ctx *middleware.Context, handler NrGoodsSpecDetailHandler) *NrGoodsSpecDetail {
	return &NrGoodsSpecDetail{Context: ctx, Handler: handler}
}

/*NrGoodsSpecDetail swagger:route GET /goods/spec/detail Goods goodsSpecDetail

商品规格详情

商品规格详情

*/
type NrGoodsSpecDetail struct {
	Context *middleware.Context
	Handler NrGoodsSpecDetailHandler
}

func (o *NrGoodsSpecDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrGoodsSpecDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
