// Code generated by go-swagger; DO NOT EDIT.

package goods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GoodsDetailHandlerFunc turns a function with the right signature into a goods detail handler
type GoodsDetailHandlerFunc func(GoodsDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GoodsDetailHandlerFunc) Handle(params GoodsDetailParams) middleware.Responder {
	return fn(params)
}

// GoodsDetailHandler interface for that can handle valid goods detail params
type GoodsDetailHandler interface {
	Handle(GoodsDetailParams) middleware.Responder
}

// NewGoodsDetail creates a new http.Handler for the goods detail operation
func NewGoodsDetail(ctx *middleware.Context, handler GoodsDetailHandler) *GoodsDetail {
	return &GoodsDetail{Context: ctx, Handler: handler}
}

/*GoodsDetail swagger:route GET /goods/detail Goods goodsDetail

商品详情

商品详情

*/
type GoodsDetail struct {
	Context *middleware.Context
	Handler GoodsDetailHandler
}

func (o *GoodsDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGoodsDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
