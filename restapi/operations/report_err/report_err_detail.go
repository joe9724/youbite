// Code generated by go-swagger; DO NOT EDIT.

package report_err

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ReportErrDetailHandlerFunc turns a function with the right signature into a report err detail handler
type ReportErrDetailHandlerFunc func(ReportErrDetailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReportErrDetailHandlerFunc) Handle(params ReportErrDetailParams) middleware.Responder {
	return fn(params)
}

// ReportErrDetailHandler interface for that can handle valid report err detail params
type ReportErrDetailHandler interface {
	Handle(ReportErrDetailParams) middleware.Responder
}

// NewReportErrDetail creates a new http.Handler for the report err detail operation
func NewReportErrDetail(ctx *middleware.Context, handler ReportErrDetailHandler) *ReportErrDetail {
	return &ReportErrDetail{Context: ctx, Handler: handler}
}

/*ReportErrDetail swagger:route GET /reportErr/detail reportErr reportErrDetail

报错详情

报错详情

*/
type ReportErrDetail struct {
	Context *middleware.Context
	Handler ReportErrDetailHandler
}

func (o *ReportErrDetail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReportErrDetailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
